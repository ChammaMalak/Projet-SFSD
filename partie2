#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MEMOIRE_TOTALE 100  // Taille totale de la mémoire secondaire (en nombre de blocs)
#define MAX_NOM 50
#define BUFFER_SIZE 256

typedef struct {
    char nom[MAX_NOM];
    int taille;  // Nombre d'enregistrements
    int taille_bloc;  // Nombre d'enregistrements par bloc
    char organisation_globale;  // 'C' pour contigu, 'Ch' pour chaîné
    char organisation_interne;  // 'T' pour triée, 'N' pour non triée
    int premier_bloc;
} Metadonnees;

// Prototypes des fonctions
void afficher_metadonnees(Metadonnees *fichier);
void mettre_a_jour_metadonnees(Metadonnees *fichier, int nouvelle_taille, int nouveau_premier_bloc);
void creer_fichier(Metadonnees *fichier);
void charger_fichier(Metadonnees *fichier);

int memoire_disponible[MEMOIRE_TOTALE];  // Table de gestion de la mémoire (0 = libre, 1 = occupé)

// Fonction pour initialiser la mémoire (tous les blocs sont libres au début)
void initialiser_memoire() {
    for (int i = 0; i < MEMOIRE_TOTALE; i++) {
        memoire_disponible[i] = 0;  // 0 signifie que le bloc est libre
    }
}

// Fonction pour allouer un bloc mémoire
int allouer_bloc() {
    for (int i = 0; i < MEMOIRE_TOTALE; i++) {
        if (memoire_disponible[i] == 0) {
            memoire_disponible[i] = 1;  // Marque le bloc comme occupé
            return i;  // Retourne l'indice du bloc alloué
        }
    }
    return -1;  // Si aucun bloc n'est disponible, retourne -1
}

// Fonction pour afficher les métadonnées du fichier
void afficher_metadonnees(Metadonnees *fichier) {
    printf("Nom du fichier: %s\n", fichier->nom);
    printf("Taille (en enregistrements): %d\n", fichier->taille);
    printf("Taille d'un bloc (en enregistrements): %d\n", fichier->taille_bloc);
    printf("Organisation globale: %c\n", fichier->organisation_globale);
    printf("Organisation interne: %c\n", fichier->organisation_interne);
    printf("Premier bloc: %d\n", fichier->premier_bloc);
}

// Fonction pour mettre à jour les métadonnées
void mettre_a_jour_metadonnees(Metadonnees *fichier, int nouvelle_taille, int nouveau_premier_bloc) {
    fichier->taille = nouvelle_taille;
    fichier->premier_bloc = nouveau_premier_bloc;

    printf("Mise à jour des métadonnées pour le fichier '%s'.\n", fichier->nom);
    afficher_metadonnees(fichier);
}

// Fonction pour demander et créer un fichier
void creer_fichier(Metadonnees *fichier) {
    char buffer[BUFFER_SIZE];

    printf("Entrez le nom du fichier: ");
    fgets(buffer, BUFFER_SIZE, stdin);
    buffer[strcspn(buffer, "\n")] = 0;  // Supprime le saut de ligne
    strncpy(fichier->nom, buffer, MAX_NOM);

    printf("Entrez le nombre d'enregistrements: ");
    fgets(buffer, BUFFER_SIZE, stdin);
    fichier->taille = atoi(buffer);

    printf("Entrez la taille d'un bloc (en nombre d'enregistrements): ");
    fgets(buffer, BUFFER_SIZE, stdin);
    fichier->taille_bloc = atoi(buffer);

    printf("Choisissez l'organisation globale (C pour contigu, Ch pour chaînée): ");
    fgets(buffer, BUFFER_SIZE, stdin);
    fichier->organisation_globale = buffer[0];

    printf("Choisissez l'organisation interne (T pour triée, N pour non triée): ");
    fgets(buffer, BUFFER_SIZE, stdin);
    fichier->organisation_interne = buffer[0];

    printf("Le fichier '%s' a été créé avec succès.\n", fichier->nom);
}

// Fonction pour charger un fichier dans la mémoire secondaire
void charger_fichier(Metadonnees *fichier) {
    int nombre_bloks_necessaires = (fichier->taille + fichier->taille_bloc - 1) / fichier->taille_bloc;  // Nombre de blocs nécessaires
    int bloc_alloue;

    for (int i = 0; i < nombre_bloks_necessaires; i++) {
        bloc_alloue = allouer_bloc();
        if (bloc_alloue == -1) {
            printf("Erreur: Pas assez de mémoire disponible pour charger le fichier '%s'.\n", fichier->nom);
            return;
        }

        if (i == 0) {
            fichier->premier_bloc = bloc_alloue;
        }
    }

    printf("Fichier '%s' chargé dans la mémoire avec succès.\n", fichier->nom);
}

int main() {
    initialiser_memoire();

    Metadonnees fichier;

    creer_fichier(&fichier);

    printf("\nMétadonnées du fichier créé :\n");
    afficher_metadonnees(&fichier);

    charger_fichier(&fichier);

    printf("\nMétadonnées après chargement du fichier dans la mémoire secondaire :\n");
    afficher_metadonnees(&fichier);

    int nouvelle_taille = 150; // Nouvelle taille après ajout d'enregistrements
    int nouveau_premier_bloc = 3; // Nouveau premier bloc après réallocation

    mettre_a_jour_metadonnees(&fichier, nouvelle_taille, nouveau_premier_bloc);

    return 0;
}
