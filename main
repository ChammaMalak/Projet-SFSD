#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX_NOM_FICHIER 20
#define BLOCK_SIZE 256
#define MAX_FIELDS 10
#define MAX_BLOCS 10
#define MAX_RECORDS 100
// Déclaration des structures et fonctions ici
// Structure pour un enregistrement
typedef struct Record {
    int id; // Identifiant unique
    char **fields; // Pointeur pour des champs de taille variable
    struct Record *next; // Pour le mode chaîné
} Record;

// Structure pour un bloc de la mémoire
typedef struct {
    int est_occupe; // 0 libre, 1 occupé
    char nom_fichier[MAX_NOM_FICHIER];
    int nombre_enregistrements; // Nb d'enregistrements dans le bloc
    Record *enregistrements; // Pointeur vers les enregistrements  
} BlocMemoire;

// Structure pour représenter la mémoire secondaire
typedef struct {
    BlocMemoire *blocs;
    int nombre_blocs;
} MemoireSecondaire;

// Structure pour les métadonnées d'un fichier
typedef struct {
    char filename[MAX_NOM_FICHIER];
    int totalBlocks;
    int totalRecords;
    int firstBlock;
    int globalMode; // Mode d'organisation globale
    int internalMode; // Mode d'organisation interne
} Metadata;

// Structure pour un fichier de données
typedef struct {
    Record records[MAX_RECORDS];
    int recordCount;
    Record *head; // Tête de la liste pour le mode chaîné
} DataFile;

// Structure pour le système de fichiers
typedef struct {
    DataFile dataFiles[MAX_BLOCS];
    Metadata metadata[MAX_BLOCS];
    int totalFiles;
} FileSystem;

// Fonction d'initialisation de la mémoire secondaire
MemoireSecondaire* initialiser_disque(int nombre_blocs);

// Fonction de compactage avec buffer
void compacter_disque(MemoireSecondaire *memoire);

// Fonction de vidage de la mémoire
void vider_disque(MemoireSecondaire *memoire);

// Fonction d'affichage de l'état de la mémoire avec buffer
void afficher_etat_disque(MemoireSecondaire *memoire);

// Fonction pour libérer la mémoire
void liberer_memoire(MemoireSecondaire *memoire);

// Initialiser le système de fichiers
void initFileSystem(FileSystem *fs);

// Fonction pour créer un fichier de données
void createDataFile(FileSystem *fs);

// Fonction pour charger un fichier (allocation des blocs)
void loadFile(FileSystem *fs, const char *filename);

// Fonction pour insérer un enregistrement
void insertRecord(FileSystem *fs, const char *filename);

// Fonction pour rechercher un enregistrement
void searchRecord(FileSystem *fs, const char *filename, int id);

// Fonction pour supprimer un enregistrement
void deleteRecord(FileSystem *fs, const char *filename, int id);

// Fonction pour défragmenter un fichier
void defragmentFile(FileSystem *fs, const char *filename);

// Fonction pour renommer un fichier
void renameFile(FileSystem *fs, const char *oldName, const char *newName);

// Fonction pour supprimer un fichier
void deleteFile(FileSystem *fs, const char *filename);


int main() {
    FileSystem fs;
    MemoireSecondaire *memoire = initialiser_disque(MAX_BLOCS);
    initFileSystem(&fs);
    int choix;
    char nom_fichier[MAX_NOM_FICHIER];
    int id;

    do {
        printf("\nMenu:\n");
        printf("1. Créer un fichier de données\n");
        printf("2. Charger un fichier\n");
        printf("3. Insérer un enregistrement\n");
        printf("4. Rechercher un enregistrement\n");
        printf("5. Supprimer un enregistrement\n");
        printf("6. Défragmenter un fichier\n");
        printf("7. Renommer un fichier\n");
        printf("8. Supprimer un fichier\n");
        printf("9. Afficher l'état de la mémoire\n");
        printf("10. Quitter\n");
        printf("Choisissez une option: ");
        scanf("%d", &choix);

        switch (choix) {
            case 1:
                createDataFile(&fs);
                break;
            case 2:
                printf("Entrez le nom du fichier à charger: ");
                scanf("%s", nom_fichier);
                loadFile(&fs, nom_fichier);
                break;
            case 3:
                printf("Entrez le nom du fichier pour insérer un enregistrement: ");
                scanf("%s", nom_fichier);
                insertRecord(&fs, nom_fichier);
                break;
            case 4:
                printf("Entrez le nom du fichier pour rechercher un enregistrement: ");
                scanf("%s", nom_fichier);
                printf("Entrez l'ID de l'enregistrement à rechercher: ");
                scanf("%d", &id);
                searchRecord(&fs, nom_fichier, id);
                break;
            case 5:
                printf("Entrez le nom du fichier pour supprimer un enregistrement: ");
                scanf("%s", nom_fichier);
                printf("Entrez l'ID de l'enregistrement à supprimer: ");
                scanf("%d", &id);
                deleteRecord(&fs, nom_fichier, id);
                break;
            case 6:
                printf("Entrez le nom du fichier à défragmenter: ");
                scanf("%s", nom_fichier);
                defragmentFile(&fs, nom_fichier);
                break;
            case 7:
                printf("Entrez le nom du fichier à renommer: ");
                scanf("%s", nom_fichier);
                char nouveau_nom[MAX_NOM_FICHIER];
                printf("Entrez le nouveau nom: ");
                scanf("%s", nouveau_nom);
                renameFile(&fs, nom_fichier, nouveau_nom);
                break;
            case 8:
                printf("Entrez le nom du fichier à supprimer: ");
                scanf("%s", nom_fichier);
                deleteFile(&fs, nom_fichier);
                break;
            case 9:
                afficher_etat_disque(memoire);
                break;
            case 10:
                printf("Quitter le programme.\n");
                break;
            default:
                printf("Choix invalide. Veuillez réessayer.\n");
        }
    } while (choix != 10);

    liberer_memoire(memoire);
    return 0;
}
