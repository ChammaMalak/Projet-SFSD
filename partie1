#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_NOM_FICHIER 20

// Structure pour un bloc de la memoire
typedef struct {
    int est_occupe; // 0 libre, 1 occupe
    char nom_fichier[MAX_NOM_FICHIER];
    int nombre_enregistrements; // Nb d'enregistrements dans le bloc
} BlocMemoire;

// Structure pour representer la memoire secondaire
typedef struct {
    BlocMemoire *blocs;
    int nombre_blocs;
    int taille_bloc;
} MemoireSecondaire;

// Fonction d'initialisation de la memoire secondaire
MemoireSecondaire* initialiser_disque(int nombre_blocs, int taille_bloc) {
    MemoireSecondaire *memoire = (MemoireSecondaire *)malloc(sizeof(MemoireSecondaire));
    if (!memoire) {
        printf("Erreur : memoire insuffisante pour creer la structure de la memoire secondaire.\n");
        return NULL;
    }

    memoire->blocs = (BlocMemoire *)malloc(nombre_blocs * sizeof(BlocMemoire));
    if (!memoire->blocs) {
        printf("Erreur : memoire insuffisante pour allouer les blocs.\n");
        free(memoire);
        return NULL;
    }

    memoire->nombre_blocs = nombre_blocs;
    memoire->taille_bloc = taille_bloc;

    for (int i = 0; i < nombre_blocs; i++) {
        memoire->blocs[i].est_occupe = 0;
        strcpy(memoire->blocs[i].nom_fichier, "");
        memoire->blocs[i].nombre_enregistrements = 0;
    }

    return memoire;
}

// Fonction de compactage avec buffer
void compacter_disque(MemoireSecondaire *memoire) {
    int index_libre = 0;
    BlocMemoire buffer;

    for (int i = 0; i < memoire->nombre_blocs; i++) {
        if (memoire->blocs[i].est_occupe) {
            if (i != index_libre) {
                // Utiliser un buffer temporaire pour le deplacement
                buffer = memoire->blocs[i];
                memoire->blocs[index_libre] = buffer;

                // Remettre l'ancien bloc a l'etat libre
                memoire->blocs[i].est_occupe = 0;
                strcpy(memoire->blocs[i].nom_fichier, "");
                memoire->blocs[i].nombre_enregistrements = 0;
            }
            index_libre++;
        }
    }
}

// Fonction de vidage de la mémoire
void vider_disque(MemoireSecondaire *memoire) {
    for (int i = 0; i < memoire->nombre_blocs; i++) {
        memoire->blocs[i].est_occupe = 0;
        strcpy(memoire->blocs[i].nom_fichier, "");
        memoire->blocs[i].nombre_enregistrements = 0;
    }
}

// Fonction d'affichage de l'etat de la memoire avec buffer
void afficher_etat_disque(MemoireSecondaire *memoire) {
    char buffer[256]; // Buffer temporaire pour l'affichage

    printf("\nEtat de la mémoire secondaire :\n");
    for (int i = 0; i < memoire->nombre_blocs; i++) {
        snprintf(buffer, sizeof(buffer), "Bloc %d : %s | Fichier : %s | Enregistrements : %d\n",
                 i,
                 memoire->blocs[i].est_occupe ? "Occupé" : "Libre",
                 memoire->blocs[i].nom_fichier,
                 memoire->blocs[i].nombre_enregistrements);
        printf("%s", buffer);
    }
}


