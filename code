#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define RESET "\033[0m"
#define GREEN "\033[42;30m"
#define RED "\033[41;30m"

#define MAX_NOM_FICHIER 20
#define BLOCK_SIZE 256
#define MAX_FIELDS 10
#define MAX_BLOCS 10
#define MAX_RECORDS 100

// Structures et types de donnees
typedef struct Record {
    int id;
    char **fields;
    int supprime; // champ pour suppression logique
    struct Record *next;
} Record;

typedef struct {
    int est_occupe;  // 0 = libre, 1 = occupe
    char nom_fichier[MAX_NOM_FICHIER];
    int nombre_enregistrements;
    Record enregistrements[BLOCK_SIZE / sizeof(Record)];  // Stockage des enregistrements dans le bloc
} BlocMemoire;

typedef struct {
    char filename[MAX_NOM_FICHIER];
    int totalBlocks;
    int totalRecords;
    int firstBlock;
    int globalMode;
    int internalMode;
} Metadata;

typedef struct {
    Record records[MAX_RECORDS];
    int recordCount;
    Record *head;
} DataFile;

typedef struct {
    DataFile dataFiles[MAX_BLOCS];
    Metadata metadata[MAX_BLOCS];
    int totalFiles;
} FileSystem;

// Fonctionnalites de base
int lire_entier_securise(const char *invite) {
    char buffer[100];
    int valeur;
    while (1) {
        printf("%s", invite);
        if (fgets(buffer, sizeof(buffer), stdin)) {
            if (sscanf(buffer, "%d", &valeur) == 1) {
                return valeur;
            }
        }
        printf("Entree invalide. Veuillez entrer un entier.\n");
    }
}

int lire_entier_choix(const char *invite, int min, int max) {
    int valeur;
    do {
        valeur = lire_entier_securise(invite);
        if (valeur < min || valeur > max) {
            printf("Erreur : veuillez entrer une valeur entre %d et %d.\n", min, max);
        }
    } while (valeur < min || valeur > max);
    return valeur;
}

void lire_chaine_securisee(const char *invite, char *chaine, int taille) {
    printf("%s", invite);
    if (fgets(chaine, taille, stdin)) {
        char *pos = strchr(chaine, '\n');
        if (pos) {
            *pos = '\0';
        }
    }
}

// Fonction pour ecrire un bloc dans le fichier de memoire secondaire
void ecrire_bloc(const char *filename, int bloc_index, BlocMemoire *bloc) {
    FILE *file = fopen(filename, "r+b");
    if (!file) {
        printf("Erreur : Impossible d'ouvrir le fichier de memoire secondaire.\n");
        return;
    }

    fseek(file, bloc_index * sizeof(BlocMemoire), SEEK_SET);
    fwrite(bloc, sizeof(BlocMemoire), 1, file);

    fclose(file);
}

// Fonction pour lire un bloc depuis le fichier de memoire secondaire
BlocMemoire lire_bloc(const char *filename, int bloc_index) {
    FILE *file = fopen(filename, "rb");
    if (!file) {
        printf("Erreur : Impossible d'ouvrir le fichier de memoire secondaire.\n");
        BlocMemoire bloc_vide = {0, "", 0};
        return bloc_vide;
    }

    BlocMemoire bloc;
    fseek(file, bloc_index * sizeof(BlocMemoire), SEEK_SET);
    fread(&bloc, sizeof(BlocMemoire), 1, file);

    fclose(file);
    return bloc;
}

// Initialisation du disque
void initialiser_disque(const char *filename, int nombre_blocs) {
    FILE *file = fopen(filename, "rb"); // Ouvrir en mode lecture pour verifier l'existence
    if (file) {
        fclose(file);
        printf("Le fichier %s existe deja. Chargement des donnees existantes.\n", filename);
        return; // Ne pas reinitialiser le fichier
    }

    // Si le fichier n'existe pas, le creer et l'initialiser
    file = fopen(filename, "wb");
    if (!file) {
        printf("Erreur : Impossible de creer le fichier de memoire secondaire.\n");
        return;
    }

    BlocMemoire bloc_vide = {0, "", 0};  // Bloc vide
    for (int i = 0; i < nombre_blocs; i++) {
        fwrite(&bloc_vide, sizeof(BlocMemoire), 1, file);
    }

    fclose(file);
    printf("Disque initialise avec succes dans le fichier %s.\n", filename);
}
// Fonction pour calculer le nombre de blocs libres
int calculerBlocsLibres(const char *filename_disque, int nombre_blocs) {
    int libres = 0;
    for (int i = 0; i < nombre_blocs; i++) {
        BlocMemoire bloc = lire_bloc(filename_disque, i);
        if (!bloc.est_occupe) {
            libres++;
        }
    }
    return libres;
}
void insererEnregistrementTrie(DataFile *file, Record *newRecord) {
    if (!file->head || file->head->id > newRecord->id) {
        newRecord->next = file->head;
        file->head = newRecord;
        return;
    }

    Record *current = file->head;
    while (current->next && current->next->id < newRecord->id) {
        current = current->next;
    }
    newRecord->next = current->next;
    current->next = newRecord;
}

void compactMemory(const char *filename_disque, int nombre_blocs) {
    int targetIndex = 0;
    for (int i = 0; i < nombre_blocs; i++) {
        BlocMemoire bloc = lire_bloc(filename_disque, i);
        if (bloc.est_occupe) {
            if (i != targetIndex) {
                // Deplacer le bloc vers la position cible
                BlocMemoire blocCible = lire_bloc(filename_disque, targetIndex);
                blocCible = bloc;
                ecrire_bloc(filename_disque, targetIndex, &blocCible);

                // Liberer le bloc d'origine
                bloc.est_occupe = 0;
                strcpy(bloc.nom_fichier, "");
                bloc.nombre_enregistrements = 0;
                ecrire_bloc(filename_disque, i, &bloc);
            }
            targetIndex++;
        }
    }
    printf("Memoire secondaire compactee avec succes.\n");
}

int fichier_existe(FileSystem *fs, const char *filename) {
    for (int i = 0; i < fs->totalFiles; i++) {
        if (strcmp(fs->metadata[i].filename, filename) == 0) {
            return 1; // Le fichier existe dejà
        }
    }
    return 0; // Le fichier n'existe pas
}

void decalerFichiers(const char *filename_disque, FileSystem *fs, int nombre_blocs) {
    int targetIndex = 0;
    for (int i = 0; i < nombre_blocs; i++) {
        BlocMemoire bloc = lire_bloc(filename_disque, i);
        if (bloc.est_occupe) {
            if (i != targetIndex) {
                // Deplacer le bloc vers la position cible
                BlocMemoire blocCible = lire_bloc(filename_disque, targetIndex);
                blocCible = bloc;
                ecrire_bloc(filename_disque, targetIndex, &blocCible);

                // Liberer le bloc d'origine
                bloc.est_occupe = 0;
                strcpy(bloc.nom_fichier, "");
                bloc.nombre_enregistrements = 0;
                ecrire_bloc(filename_disque, i, &bloc);
            }
            targetIndex++;
        }
    }
}

void createDataFile(const char *filename_disque, FileSystem *fs, int nombre_blocs) {
    if (fs->totalFiles >= MAX_BLOCS) {
        printf("Erreur : Limite maximale de fichiers atteinte.\n");
        return;
    }

    Metadata *meta = &fs->metadata[fs->totalFiles];
    DataFile *file = &fs->dataFiles[fs->totalFiles];

    // Demander les caracteristiques du fichier
    lire_chaine_securisee("Entrez le nom du fichier : ", meta->filename, MAX_NOM_FICHIER);

    // Verifier si le fichier existe dejà
    if (fichier_existe(fs, meta->filename)) {
        printf("Erreur : Un fichier avec le nom '%s' existe deja.\n", meta->filename);
        return;
    }

    meta->totalRecords = lire_entier_securise("Entrez le nombre d'enregistrements : ");
    meta->globalMode = lire_entier_choix("Entrez le mode global (1: contigu, 2: chaine) : ", 1, 2);
    meta->internalMode = lire_entier_choix("Entrez le mode interne (1: trie, 2: non trie) : ", 1, 2);

    // Calculer les blocs necessaires
    meta->totalBlocks = (meta->totalRecords * sizeof(Record) + BLOCK_SIZE - 1) / BLOCK_SIZE;
    meta->firstBlock = -1;

    // Verification de l'espace disponible
    int blocsLibres = calculerBlocsLibres(filename_disque, nombre_blocs);
    if (blocsLibres < meta->totalBlocks) {
        printf("Espace insuffisant pour creer le fichier. Tentative de compactage...\n");
        compactMemory(filename_disque, nombre_blocs);
        blocsLibres = calculerBlocsLibres(filename_disque, nombre_blocs);
        if (blocsLibres < meta->totalBlocks) {
            printf("Erreur : Memoire pleine. Impossible de creer le fichier.\n");
            return;
        }
    }

    // Trouver les premiers blocs libres contigus ou chaînes
    int startBlock = -1;
    int contiguousFreeBlocks = 0;
    int *blocsAlloues = NULL; // Pour stocker les indices des blocs alloues en mode chaîne

    if (meta->globalMode == 1) { // Mode contigu
        for (int i = 0; i < nombre_blocs; i++) {
            BlocMemoire bloc = lire_bloc(filename_disque, i);
            if (!bloc.est_occupe) {
                if (startBlock == -1) {
                    startBlock = i; // Premier bloc libre trouve
                }
                contiguousFreeBlocks++;
                if (contiguousFreeBlocks >= meta->totalBlocks) {
                    break; // On a trouve suffisamment de blocs contigus
                }
            } else {
                startBlock = -1;
                contiguousFreeBlocks = 0;
            }
        }

        // Si on n'a pas trouve de blocs contigus, decaler les fichiers existants
        if (contiguousFreeBlocks < meta->totalBlocks) {
            printf("Decalage des fichiers existants pour regrouper les blocs libres...\n");
            decalerFichiers(filename_disque, fs, nombre_blocs);

            // Reessayer de trouver une sequence de blocs libres contigus après decalage
            startBlock = -1;
            contiguousFreeBlocks = 0;
            for (int i = 0; i < nombre_blocs; i++) {
                BlocMemoire bloc = lire_bloc(filename_disque, i);
                if (!bloc.est_occupe) {
                    if (startBlock == -1) {
                        startBlock = i;
                    }
                    contiguousFreeBlocks++;
                    if (contiguousFreeBlocks >= meta->totalBlocks) {
                        break;
                    }
                } else {
                    startBlock = -1;
                    contiguousFreeBlocks = 0;
                }
            }
        }

        // Si on n'a toujours pas trouve de blocs contigus, erreur
        if (contiguousFreeBlocks < meta->totalBlocks) {
            printf("Erreur : Impossible de trouver suffisamment de blocs contigus.\n");
            return;
        }
    } else { // Mode chaîne
        // Trouver des blocs libres non contigus
        blocsAlloues = malloc(meta->totalBlocks * sizeof(int)); // Allocation dynamique
        if (!blocsAlloues) {
            printf("Erreur : Impossible d'allouer de la memoire pour les blocs.\n");
            return;
        }

        int blocsTrouves = 0;
        for (int i = 0; i < nombre_blocs && blocsTrouves < meta->totalBlocks; i++) {
            BlocMemoire bloc = lire_bloc(filename_disque, i);
            if (!bloc.est_occupe) {
                blocsAlloues[blocsTrouves++] = i;
            }
        }

        if (blocsTrouves < meta->totalBlocks) {
            printf("Erreur : Impossible de trouver suffisamment de blocs libres.\n");
            free(blocsAlloues); // Liberer la memoire allouee
            return;
        }

        startBlock = blocsAlloues[0]; // Premier bloc alloue
    }

    // Allouer les blocs pour le nouveau fichier
    int idCounter = 1; // Compteur global pour les IDs
    for (int i = 0; i < meta->totalBlocks; i++) {
        int blocIndex = (meta->globalMode == 1) ? startBlock + i : blocsAlloues[i];
        BlocMemoire bloc = lire_bloc(filename_disque, blocIndex);
        bloc.est_occupe = 1;
        strcpy(bloc.nom_fichier, meta->filename);

        // Calculer le nombre d'enregistrements par bloc
        int enregistrementsParBloc = meta->totalRecords / meta->totalBlocks;
        if (i == meta->totalBlocks - 1) {
            // Le dernier bloc prend le reste des enregistrements
            enregistrementsParBloc = meta->totalRecords - (enregistrementsParBloc * (meta->totalBlocks - 1));
        }
        bloc.nombre_enregistrements = enregistrementsParBloc;

        // Initialiser les enregistrements dans ce bloc
        for (int j = 0; j < bloc.nombre_enregistrements; j++) {
            Record newRecord;
            newRecord.id = idCounter++; // ID unique et sequentiel
            newRecord.fields = malloc(MAX_FIELDS * sizeof(char *));
            for (int k = 0; k < MAX_FIELDS; k++) {
                newRecord.fields[k] = malloc(50 * sizeof(char));
                snprintf(newRecord.fields[k], 50, "Valeur par defaut %d-%d", newRecord.id, k + 1);
            }
            newRecord.supprime = 0; // Non supprime
            newRecord.next = NULL;

            // Ajouter l'enregistrement au bloc
            bloc.enregistrements[j] = newRecord;
        }

        // Ecrire le bloc dans la memoire secondaire
        ecrire_bloc(filename_disque, blocIndex, &bloc);
    }

    // Mise à jour des metadonnees
    meta->firstBlock = startBlock; // Premier bloc alloue
    meta->totalBlocks = meta->totalBlocks; // Pas de changement ici
    meta->totalRecords = meta->totalRecords; // Pas de changement ici

    // Liberer la memoire allouee pour les blocs en mode chaîne
    if (meta->globalMode == 2) {
        free(blocsAlloues);
    }

    fs->totalFiles++;
    printf("Fichier %s cree avec succes.\n", meta->filename);
}

void afficher_ids_enregistrements(DataFile *file) {
    if (file->recordCount == 0) {
        printf("Aucun enregistrement disponible.\n");
        return;
    }

    printf("Liste des IDs disponibles : ");
    if (file->head) { // Mode chaîne
        Record *current = file->head;
        while (current) {
            printf("%d ", current->id);
            current = current->next;
        }
    } else { // Mode contigu
        for (int i = 0; i < file->recordCount; i++) {
            printf("%d ", file->records[i].id);
        }
    }
    printf("\n");
}

void insertRecord(const char *filename_disque, FileSystem *fs, int nombre_blocs, const char *filename) {
    for (int i = 0; i < fs->totalFiles; i++) {
        if (strcmp(fs->metadata[i].filename, filename) == 0) {
            Metadata *meta = &fs->metadata[i];

            if (meta->totalRecords >= MAX_RECORDS) {
                printf("Erreur : Limite maximale d'enregistrements atteinte.\n");
                return;
            }

            // Verifier s'il y a suffisamment de blocs libres
            int blocsLibres = calculerBlocsLibres(filename_disque, nombre_blocs);
            if (blocsLibres < 1) { // Au moins un bloc libre est necessaire
                printf("Espace insuffisant pour inserer un enregistrement. Tentative de compactage...\n");
                compactMemory(filename_disque, nombre_blocs);
                blocsLibres = calculerBlocsLibres(filename_disque, nombre_blocs);
                if (blocsLibres < 1) {
                    printf("Erreur : Memoire pleine. Impossible d'inserer l'enregistrement.\n");
                    return;
                }
            }

            // Creer le nouvel enregistrement
            Record newRecord;
            newRecord.id = lire_entier_securise("Entrez l'ID de l'enregistrement : ");
            newRecord.fields = malloc(MAX_FIELDS * sizeof(char *));
            for (int j = 0; j < MAX_FIELDS; j++) {
                newRecord.fields[j] = malloc(50 * sizeof(char));
                snprintf(newRecord.fields[j], 50, "Valeur par defaut %d", j + 1); // Utilisation de '.' au lieu de '->'
            }
            newRecord.supprime = 0; // Non supprime
            newRecord.next = NULL;

            // Trouver un bloc libre pour stocker l'enregistrement
            int blocIndex = -1;
            for (int j = 0; j < nombre_blocs; j++) {
                BlocMemoire bloc = lire_bloc(filename_disque, j);
                if (!bloc.est_occupe) {
                    blocIndex = j;
                    break;
                }
            }

            if (blocIndex == -1) {
                printf("Erreur : Aucun bloc libre trouve.\n");
                // Liberer la memoire allouee pour les champs
                for (int j = 0; j < MAX_FIELDS; j++) {
                    free(newRecord.fields[j]);
                }
                free(newRecord.fields);
                return;
            }

            // Allouer le bloc pour l'enregistrement
            BlocMemoire bloc = lire_bloc(filename_disque, blocIndex);
            bloc.est_occupe = 1;
            strcpy(bloc.nom_fichier, filename);
            bloc.nombre_enregistrements = 1; // Un seul enregistrement dans ce bloc
            bloc.enregistrements[0] = newRecord; // Ajouter l'enregistrement au bloc
            ecrire_bloc(filename_disque, blocIndex, &bloc);

            // Mise à jour des metadonnees
            meta->totalRecords++;
            printf("Enregistrement ajoute avec succès dans le bloc %d.\n", blocIndex);
            return;
        }
    }
    printf("Erreur : Fichier %s non trouve.\n", filename);
}
void searchRecord(const char *filename_disque, FileSystem *fs, int nombre_blocs, const char *filename, int id) {
    for (int i = 0; i < fs->totalFiles; i++) {
        if (strcmp(fs->metadata[i].filename, filename) == 0) {
            Metadata *meta = &fs->metadata[i];
            printf("Recherche de l'enregistrement avec l'ID %d dans le fichier %s...\n", id, filename);

            // Parcourir tous les blocs associes au fichier
            for (int j = 0; j < nombre_blocs; j++) {
                BlocMemoire bloc = lire_bloc(filename_disque, j);
                if (bloc.est_occupe && strcmp(bloc.nom_fichier, filename) == 0) {
                    // Parcourir les enregistrements dans le bloc
                    for (int k = 0; k < bloc.nombre_enregistrements; k++) {
                        if (bloc.enregistrements[k].id == id) {
                            printf("Enregistrement trouve : Bloc = %d, Deplacement = %d\n", j, k);
                            return;
                        }
                    }
                }
            }

            printf("Erreur : Enregistrement avec l'ID %d non trouve.\n", id);
            return;
        }
    }
    printf("Erreur : Fichier %s non trouve.\n", filename);
}
void deleteRecord(const char *filename_disque, FileSystem *fs, int nombre_blocs, const char *filename, int id) {
    for (int i = 0; i < fs->totalFiles; i++) {
        if (strcmp(fs->metadata[i].filename, filename) == 0) {
            Metadata *meta = &fs->metadata[i];
            DataFile *file = &fs->dataFiles[i];

            printf("Suppression de l'enregistrement avec l'ID %d dans le fichier %s...\n", id, filename);

            int found = 0;
            // Parcourir tous les blocs associes au fichier
            for (int j = 0; j < nombre_blocs; j++) {
                BlocMemoire bloc = lire_bloc(filename_disque, j);
                if (bloc.est_occupe && strcmp(bloc.nom_fichier, filename) == 0) {
                    // Parcourir les enregistrements dans le bloc
                    for (int k = 0; k < bloc.nombre_enregistrements; k++) {
                        if (bloc.enregistrements[k].id == id) {
                            // Suppression logique
                            bloc.enregistrements[k].supprime = 1;
                            printf("Enregistrement avec l'ID %d marque comme supprime (logique).\n", id);

                            // Suppression physique
                            for (int l = k; l < bloc.nombre_enregistrements - 1; l++) {
                                bloc.enregistrements[l] = bloc.enregistrements[l + 1];
                            }
                            bloc.nombre_enregistrements--;
                            ecrire_bloc(filename_disque, j, &bloc);

                            file->recordCount--;
                            printf("Enregistrement avec l'ID %d supprime physiquement.\n", id);

                            found = 1;
                            break;
                        }
                    }
                    if (found) break;
                }
            }
            if (!found) {
                printf("Erreur : Enregistrement avec l'ID %d non trouve.\n", id);
            }
            return;
        }
    }
    printf("Erreur : Fichier %s non trouve.\n", filename);
}
void deleteDataFile(const char *filename_disque, FileSystem *fs, int nombre_blocs, const char *filename) {
    for (int i = 0; i < fs->totalFiles; i++) {
        if (strcmp(fs->metadata[i].filename, filename) == 0) {
            DataFile *file = &fs->dataFiles[i];
            Metadata *meta = &fs->metadata[i];

            // Liberation des enregistrements en mode chaîne
            if (meta->globalMode == 2 && file->head) {
                Record *current = file->head;
                while (current) {
                    Record *temp = current;
                    current = current->next;
                    free(temp);
                }
            }

            // Liberer les blocs associes dans la memoire secondaire
            for (int j = 0; j < nombre_blocs; j++) {
                BlocMemoire bloc = lire_bloc(filename_disque, j);
                if (bloc.est_occupe && strcmp(bloc.nom_fichier, filename) == 0) {
                    bloc.est_occupe = 0;
                    strcpy(bloc.nom_fichier, "");
                    bloc.nombre_enregistrements = 0;
                    ecrire_bloc(filename_disque, j, &bloc);
                }
            }

            // Reinitialisation des metadonnees
            memset(meta, 0, sizeof(Metadata));

            // Decalage des fichiers restants
            for (int j = i; j < fs->totalFiles - 1; j++) {
                fs->metadata[j] = fs->metadata[j + 1];
                fs->dataFiles[j] = fs->dataFiles[j + 1];
            }

            fs->totalFiles--;
            printf("Fichier %s supprime avec succes.\n", filename);
            return;
        }
    }
    printf("Erreur : Fichier %s non trouve.\n", filename);
}
void demanderConfirmationEtSupprimer(const char *filename_disque, FileSystem *fs, int nombre_blocs, const char *filename) {
    char confirmation[4];
    while (1) {
        printf("Etes-vous sur de vouloir supprimer le fichier %s ? (oui/non) : ", filename);
        lire_chaine_securisee("", confirmation, sizeof(confirmation));

        if (strcmp(confirmation, "oui") == 0) {
            deleteDataFile(filename_disque, fs, nombre_blocs, filename);
            break;
        } else if (strcmp(confirmation, "non") == 0) {
            printf("Suppression annulee.\n");
            break;
        } else {
            printf("Entree invalide. Veuillez repondre par 'oui' ou 'non'.\n");
        }
    }
}
void renameDataFile(const char *filename_disque, FileSystem *fs, int nombre_blocs, const char *oldName, const char *newName) {
    for (int i = 0; i < fs->totalFiles; i++) {
        if (strcmp(fs->metadata[i].filename, oldName) == 0) {
            // Mettre à jour le nom du fichier dans les metadonnees
            strncpy(fs->metadata[i].filename, newName, MAX_NOM_FICHIER);

            // Mettre à jour le nom du fichier dans les blocs de la memoire secondaire
            for (int j = 0; j < nombre_blocs; j++) {
                BlocMemoire bloc = lire_bloc(filename_disque, j);
                if (bloc.est_occupe && strcmp(bloc.nom_fichier, oldName) == 0) {
                    strcpy(bloc.nom_fichier, newName);
                    ecrire_bloc(filename_disque, j, &bloc);
                }
            }

            printf("Fichier renomme de %s à %s avec succes.\n", oldName, newName);
            return;
        }
    }
    printf("Erreur : Fichier %s non trouve.\n", oldName);
}

// Fonction pour afficher l'etat de la memoire secondaire
void afficherEtatMemoire(const char *filename, int nombre_blocs) {
    printf("\nEtat de la memoire secondaire :\n");
    printf("\nChaque bloc peut être soit " GREEN "Libre" RESET " ou " RED "Occupe" RESET ".\n\n");

    // Bord superieur
    printf("+------+------------------+----------------------+\n");
    printf("| Bloc | Etat             | Details             |\n");
    printf("+------+------------------+----------------------+\n");

    // Parcourir et afficher les blocs
    for (int i = 0; i < nombre_blocs; i++) {
        BlocMemoire bloc = lire_bloc(filename, i);
        if (bloc.est_occupe) {
            // Affichage pour bloc occupe (rouge)
            printf("| %-4d | %sUtilise          %s | Nom : %-12s |\n", 
                   i, RED, RESET, bloc.nom_fichier);
            printf("|      |                  | Enregistrements : %-3d |\n", 
                   bloc.nombre_enregistrements);
        } else {
            // Affichage pour bloc libre (vert)
            printf("| %-4d | %sLibre            %s |                      |\n", 
                   i, GREEN, RESET);
        }
        // Separateur entre les lignes
        printf("+------+------------------+----------------------+\n");
    }
    printf("\nResume : %d blocs libres sur %d.\n",
           calculerBlocsLibres(filename, nombre_blocs), nombre_blocs);
}

void defragmentFile(const char *filename_disque, FileSystem *fs, int nombre_blocs, const char *filename) {
    // Afficher l'etat de la memoire avant la defragmentation
    printf("\nEtat de la memoire avant la defragmentation :\n");
    afficherEtatMemoire(filename_disque, nombre_blocs);

    // Trouver le fichier dans le système de fichiers
    for (int i = 0; i < fs->totalFiles; i++) {
        if (strcmp(fs->metadata[i].filename, filename) == 0) {
            Metadata *meta = &fs->metadata[i];
            printf("Debut de la defragmentation du fichier %s...\n", filename);

            // Indice pour le prochain bloc où deplacer les enregistrements
            int targetIndex = 0;

            // Parcourir tous les blocs pour reorganiser les enregistrements
            for (int j = 0; j < nombre_blocs; j++) {
                BlocMemoire bloc = lire_bloc(filename_disque, j);
                if (bloc.est_occupe && strcmp(bloc.nom_fichier, filename) == 0) {
                    // Trouver le prochain bloc libre pour deplacer les enregistrements
                    while (targetIndex < nombre_blocs) {
                        BlocMemoire blocCible = lire_bloc(filename_disque, targetIndex);
                        if (!blocCible.est_occupe) {
                            break; // Bloc libre trouve
                        }
                        targetIndex++;
                    }

                    // Si on a trouve un bloc libre et qu'il est different du bloc actuel
                    if (targetIndex < nombre_blocs && targetIndex != j) {
                        // Deplacer le bloc vers la position cible
                        BlocMemoire blocCible = lire_bloc(filename_disque, targetIndex);
                        blocCible = bloc; // Copier le bloc
                        ecrire_bloc(filename_disque, targetIndex, &blocCible);

                        // Liberer le bloc d'origine
                        bloc.est_occupe = 0;
                        strcpy(bloc.nom_fichier, "");
                        bloc.nombre_enregistrements = 0;
                        ecrire_bloc(filename_disque, j, &bloc);

                        printf("Bloc %d deplace vers le bloc %d.\n", j, targetIndex);
                    }

                    targetIndex++; // Passer au prochain bloc
                }
            }

            // Mettre à jour les metadonnees du fichier
            meta->firstBlock = targetIndex - meta->totalBlocks; // Mise à jour du premier bloc
            printf("Fichier %s defragmente avec succes.\n", filename);

            // Afficher l'etat de la memoire après la defragmentation
            printf("\nEtat de la memoire après la defragmentation :\n");
            afficherEtatMemoire(filename_disque, nombre_blocs);

            return;
        }
    }

    printf("Erreur : Fichier %s non trouve.\n", filename);
}
void clearMemory(const char *filename_disque, FileSystem *fs, int nombre_blocs) {
    // Ouvrir le fichier de memoire secondaire en mode ecriture
    FILE *file = fopen(filename_disque, "wb");
    if (!file) {
        printf("Erreur : Impossible d'ouvrir le fichier de memoire secondaire.\n");
        return;
    }

    // Creer un bloc vide
    BlocMemoire bloc_vide = {0, "", 0};

    // Reinitialiser tous les blocs dans le fichier
    for (int i = 0; i < nombre_blocs; i++) {
        fwrite(&bloc_vide, sizeof(BlocMemoire), 1, file);
    }

    fclose(file);

    // Reinitialiser les metadonnees du système de fichiers
    fs->totalFiles = 0; // Reinitialiser le nombre de fichiers
    memset(fs->metadata, 0, sizeof(fs->metadata)); // Reinitialiser les metadonnees
    memset(fs->dataFiles, 0, sizeof(fs->dataFiles)); // Reinitialiser les fichiers de donnees

    printf("Memoire secondaire et metadonnees videes avec succcs.\n");
}

void charger_fichiers_existants(const char *filename_disque, FileSystem *fs, int nombre_blocs) {
    for (int i = 0; i < nombre_blocs; i++) {
        BlocMemoire bloc = lire_bloc(filename_disque, i);
        if (bloc.est_occupe) {
            // Verifier si le fichier est dejà dans le FileSystem
            int fichier_trouve = 0;
            for (int j = 0; j < fs->totalFiles; j++) {
                if (strcmp(fs->metadata[j].filename, bloc.nom_fichier) == 0) {
                    fichier_trouve = 1;
                    break;
                }
            }

            // Si le fichier n'est pas dejà dans le FileSystem, l'ajouter
            if (!fichier_trouve) {
                if (fs->totalFiles >= MAX_BLOCS) {
                    printf("Erreur : Limite maximale de fichiers atteinte.\n");
                    return;
                }

                Metadata *meta = &fs->metadata[fs->totalFiles];
                DataFile *file = &fs->dataFiles[fs->totalFiles];

                // Copier les metadonnees du fichier
                strcpy(meta->filename, bloc.nom_fichier);
                meta->totalBlocks = 1; // À adapter selon votre logique
                meta->totalRecords = bloc.nombre_enregistrements;
                meta->firstBlock = i;

                // Initialiser les enregistrements dans le DataFile
                for (int j = 0; j < bloc.nombre_enregistrements; j++) {
                    file->records[j] = bloc.enregistrements[j];
                }
                file->recordCount = bloc.nombre_enregistrements;

                fs->totalFiles++;
            }
        }
    }
}

void displayMetadata(FileSystem *fs, const char *filename_disque, int nombre_blocs) {
    if (fs->totalFiles == 0) {
        printf("Aucune metadonnee disponible. Aucun fichier n'a ete cree.\n");
        return;
    }

    printf("Metadonnees des fichiers :\n");
    printf("+--------------------+--------+----------------+-------------+--------------+\n");
    printf("| Nom du fichier     | Blocs  | Enregistrements| Mode global | Mode interne |\n");
    printf("+--------------------+--------+----------------+-------------+--------------+\n");

    for (int i = 0; i < fs->totalFiles; i++) {
        Metadata *meta = &fs->metadata[i];
        const char *modeGlobal = (meta->globalMode == 1) ? "Contigu" : "Chaine";
        const char *modeInterne = (meta->internalMode == 1) ? "Trie" : "Non trie";

        // Variables pour compter les blocs et enregistrements reels
        int totalBlocs = 0;
        int totalEnregistrements = 0;

        // Parcourir tous les blocs pour compter ceux associes à ce fichier
        for (int j = 0; j < nombre_blocs; j++) {
            BlocMemoire bloc = lire_bloc(filename_disque, j);
            if (bloc.est_occupe && strcmp(bloc.nom_fichier, meta->filename) == 0) {
                totalBlocs++; // Compter le bloc
                totalEnregistrements += bloc.nombre_enregistrements; // Ajouter les enregistrements
            }
        }

        // Afficher les informations de base du fichier
        printf("| %-18s | %-6d | %-14d | %-11s | %-12s |\n",
               meta->filename,
               totalBlocs,              // Nombre total de blocs occupes par ce fichier
               totalEnregistrements,    // Nombre total d'enregistrements dans ce fichier
               modeGlobal,
               modeInterne);
    }

    printf("+--------------------+--------+----------------+-------------+--------------+\n");
}

int main() {
    const char *filename_disque = "disque_virtuel.bin";
    int nombre_blocs = MAX_BLOCS;
    
    FileSystem fs = {0};
    fs.totalFiles = 0;

    // Initialisation du disque
    initialiser_disque(filename_disque, nombre_blocs);
    // Charger les fichiers existants
    charger_fichiers_existants(filename_disque, &fs, nombre_blocs);

    int choix;
    do {
        printf("\nMenu Principal :\n");
        printf("1. Creer un fichier\n");
        printf("2. Supprimer un fichier\n");
        printf("3. Renommer un fichier\n");
        printf("4. Inserer un enregistrement\n");
        printf("5. Supprimer un enregistrement\n");
        printf("6. Rechercher un enregistrement\n");
        printf("7. Defragmenter un fichier\n");
        printf("8. Afficher l'etat de la memoire\n");
        printf("9. Compactage de la memoire secondaire\n");
        printf("10. Vider la memoire secondaire\n");
        printf("11. Afficher les metadonnees des fichiers\n");
        printf("12. Quitter\n");

        choix = lire_entier_choix("Entrez votre choix : ", 1, 12);

        char filename[MAX_NOM_FICHIER];
        switch (choix) {
            case 1:
                createDataFile(filename_disque, &fs, nombre_blocs);
                break;
                
            case 2:
                lire_chaine_securisee("Entrez le nom du fichier a supprimer : ", filename, MAX_NOM_FICHIER);
                demanderConfirmationEtSupprimer(filename_disque, &fs, nombre_blocs, filename);
                break;

            case 3: {
                char newName[MAX_NOM_FICHIER]; // Deplacement dans un bloc
                lire_chaine_securisee("Entrez le nom actuel du fichier : ", filename, MAX_NOM_FICHIER);
                lire_chaine_securisee("Entrez le nouveau nom du fichier : ", newName, MAX_NOM_FICHIER);
                 renameDataFile(filename_disque, &fs, nombre_blocs, filename, newName);
                break;
            }
            case 4:
                lire_chaine_securisee("Entrez le nom du fichier : ", filename, MAX_NOM_FICHIER);
                insertRecord(filename_disque, &fs, nombre_blocs, filename);
                break;
            case 5: {
                int id; 
                lire_chaine_securisee("Entrez le nom du fichier : ", filename, MAX_NOM_FICHIER);
                // Chercher le fichier et afficher les IDs disponibles
                for (int i = 0; i < fs.totalFiles; i++) {
                    if (strcmp(fs.metadata[i].filename, filename) == 0) {
                        afficher_ids_enregistrements(&fs.dataFiles[i]);
                        break;
                    }
                }
                id = lire_entier_securise("Entrez l'ID de l'enregistrement a supprimer : ");
                deleteRecord(filename_disque, &fs, nombre_blocs, filename, id);
                break;
            }
            case 6:{
            	int id;
                lire_chaine_securisee("Entrez le nom du fichier : ", filename, MAX_NOM_FICHIER);
                id = lire_entier_securise("Entrez l'ID de l'enregistrement a rechercher : ");
                searchRecord(filename_disque, &fs, nombre_blocs, filename, id);
				break;
			}
			
            case 7: {
                lire_chaine_securisee("Entrez le nom du fichier a defragmenter : ", filename, MAX_NOM_FICHIER);
                defragmentFile(filename_disque, &fs, nombre_blocs, filename);
                break;
            }
            
            case 8:
                afficherEtatMemoire(filename_disque, nombre_blocs);
                break;
			case 9:
               compactMemory(filename_disque, nombre_blocs);
                break;
           case 10:
                clearMemory(filename_disque, &fs, nombre_blocs); 
                break;
           case 11:
                displayMetadata(&fs, filename_disque, nombre_blocs);
                break;	
            case 12:
                printf("Quitter le programme.\n");
                break;
        }
    } while (choix != 12);
    
     // Liberation de la memoire allouee dynamiquement
     
    for (int i = 0; i < fs.totalFiles; i++) {
    Record *current = fs.dataFiles[i].head;
    while (current) {
        Record *temp = current;
        current = current->next;
        // Liberer les champs de l'enregistrement
        for (int j = 0; j < MAX_FIELDS; j++) {
            free(temp->fields[j]);
        }
        free(temp->fields);
        free(temp);
    }

}



    return 0;
}
